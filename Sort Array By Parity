/*
Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:

Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
Example 2:

Input: nums = [2,3]
Output: [2,3]
*/



class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        int even=0, odd=1;
        while(even<nums.length && odd<nums.length)
        {
            if(nums[even]%2!=0)
            {
            swap(nums,even,odd);
            odd+=2;
            }
            else
            {
                even+=2;
            }
            
            
        }
       return(nums);
    }
    void swap(int a[],int i, int j)
        {
            int temp;
            temp=a[i];
            a[i]=a[j];
            a[j]=temp;
            
        }
        
}
